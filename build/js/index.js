(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Entity, Game, Main, Player;

Player = require('./entities/Player');

Entity = require('./entities/Entity');

Game = require('./Game');

Main = (function() {
  function Main() {
    var game;
    this.width = 640;
    this.height = 480;
    game = new Game({
      assetsToLoad: {
        image: [['test', 'assets/test.png'], ['test2', 'assets/test.png'], ['p1_stand', 'assets/platformerGraphicsDeluxe/Player/p1_stand.png'], ['sword', 'assets/sword.png']],
        atlasJSONHash: [['p1_walk', 'assets/platformerGraphicsDeluxe/Player/p1_walk/p1_walk.png', 'assets/platformerGraphicsDeluxe/Player/p1_walk/p1_walk.json']],
        spritesheet: [['p1', 'assets/platformerGraphicsDeluxe/Player/p1_spritesheet.png', 67, 93, -1, 0, 6]]
      },
      create: function() {
        var e, sword;
        e = new Player(game, 100, 400, 'p1');
        sword = new Entity(game, 10, 30, 'sword');
        return e.equipSword(sword);
      }
    });
  }

  return Main;

})();

window.onload = function() {
  var game;
  console.log("Welcome to my game!");
  return game = new Main();
};



},{"./Game":3,"./entities/Entity":4,"./entities/Player":5}],2:[function(require,module,exports){
var Debug;

Debug = (function() {
  function Debug(phaser) {
    this.phaser = phaser;
    this.x = 2;
    this.startY = 14;
    this.y = this.startY;
    this.step = 20;
    this.lines = [];
  }

  Debug.prototype.add = function(text) {
    return this.lines.push(text);
  };

  Debug.prototype.flush = function() {
    var i, line, ref, results;
    this.y = this.startY;
    results = [];
    for (line = i = 1, ref = this.lines.length; 1 <= ref ? i <= ref : i >= ref; line = 1 <= ref ? ++i : --i) {
      results.push(this._write(this.lines.shift()));
    }
    return results;
  };

  Debug.prototype._write = function(text) {
    this.phaser.debug.text(text, this.x, this.y, '#00ff00');
    return this.y += this.step;
  };

  return Debug;

})();

module.exports = Debug;



},{}],3:[function(require,module,exports){
var Debug, Game,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Debug = require('./Debug');

Game = (function() {
  function Game(startingState) {
    this._render = bind(this._render, this);
    this._update = bind(this._update, this);
    this._create = bind(this._create, this);
    this._preload = bind(this._preload, this);
    this.renderer = Phaser.AUTO;
    this.parent = 'game-container';
    this.antialias = false;
    if (startingState.assetsToLoad == null) {
      this.assetsToLoad = {
        image: [],
        audio: [],
        atlasJSONHash: []
      };
    } else {
      this.assetsToLoad = startingState.assetsToLoad;
    }
    this.assets = {
      images: {},
      audio: {}
    };
    this.entities = [];
    this.phaser = new Phaser.Game(640, 480, this.renderer, this.parent, {
      preload: this._preload,
      create: this._create(startingState.create),
      update: this._update,
      render: this._render
    }, this.antialias, this.physicsConfig);
    this.physics = Phaser.Physics.ARCADE;
    this.debug = new Debug(this.phaser);
  }

  Game.prototype.add = function(entity, gravity) {
    var sprite;
    this.entities.push(entity);
    sprite = this.phaser.add.sprite(entity.x, entity.y, entity.image, entity.starting_frame, entity.group || void 0);
    if (gravity) {
      this.phaser.physics.enable(sprite, this.physics);
    }
    return sprite;
  };

  Game.prototype.queue = function(callback, delay) {
    return this.phaser.time.events.add(delay, callback);
  };

  Game.prototype._preload = function() {
    var asset, assetType, assets, i, len, ref;
    console.log("Preloading");
    ref = this.assetsToLoad;
    for (assetType in ref) {
      assets = ref[assetType];
      for (i = 0, len = assets.length; i < len; i++) {
        asset = assets[i];
        console.log("Loading " + asset[1] + " as " + asset[0]);
        this.phaser.load[assetType].apply(this.phaser.load, asset);
      }
    }
    return console.log("Done...");
  };

  Game.prototype._create = function(create) {
    return (function(_this) {
      return function() {
        _this.phaser.stage.backgroundColor = '#222';
        _this.phaser.physics.startSystem(_this.physics);
        _this.phaser.physics.arcade.gravity.y = 10000;
        _this.phaser.scale.scaleMode = Phaser.ScaleManager.RESIZE;
        _this.phaser.scale.pageAlignHorizontally = true;
        _this.phaser.scale.pageAlignVertically = true;
        _this.phaser.scale.setScreenSize(true);
        _this.phaser.time.advancedTiming = true;
        return create();
      };
    })(this);
  };

  Game.prototype._update = function() {
    var entity, i, len, ref, results;
    ref = this.entities;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      entity = ref[i];
      results.push(entity.update());
    }
    return results;
  };

  Game.prototype._render = function() {
    this.debug.add("Resolution: " + window.innerWidth + "x" + window.innerHeight);
    this.debug.add("FPS:        " + (this.phaser.time.fps || '--'));
    this.debug.add("");
    this.debug.add("Controls:");
    this.debug.add("Left:   A");
    this.debug.add("Right:  D");
    this.debug.add("Jump:   Space");
    this.debug.add("Attack: J");
    this.debug.flush();
    return this.phaser.debug.timer(this.phaser.time.events, 300, 14, '#0f0');
  };

  return Game;

})();

module.exports = Game;



},{"./Debug":2}],4:[function(require,module,exports){
var Entity,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Entity = (function() {
  function Entity(game, x, y, image, group, gravity) {
    this.game = game;
    this.x = x;
    this.y = y;
    this.image = image;
    this.group = group;
    this.gravity = gravity;
    this.move = bind(this.move, this);
    this.moveLeft = bind(this.moveLeft, this);
    console.log("I Think Therefore I Am");
    console.log("AT: " + this.x + ", " + this.y);
    this.starting_frame = 1;
    this.sprite = this.game.add(this, this.gravity);
    if (this.gravity) {
      this.sprite.body.collideWorldBounds = true;
    }
    this.sprite.anchor.x = .5;
    this.sprite.anchor.y = .5;
    this.limit = 50;
    this.accel = 0;
    this.speed = 1000;
    this.maxJumps = 2;
    this.jumps = 0;
    this.dir = 1;
  }

  Entity.prototype.update = function() {};

  Entity.prototype.updatePos = function() {
    if (this.accel >= .1) {
      this.accel -= .1;
    }
    if (this.accel < 0) {
      this.accel = 0;
    }
    return this.sprite.x += this.accel;
  };

  Entity.prototype.moveRight = function() {
    this.dir = 1;
    return this.move(this.speed);
  };

  Entity.prototype.moveLeft = function() {
    this.dir = -1;
    return this.move(-this.speed);
  };

  Entity.prototype.move = function(dir) {
    this.sprite.scale.x = this.dir;
    if (!this.sprite.body.blocked.down) {
      return;
    }
    this.sprite.animations.play('walk');
    return this.sprite.body.velocity.x += dir;
  };

  return Entity;

})();

module.exports = Entity;



},{}],5:[function(require,module,exports){
var Entity, Player,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Entity = require('./Entity');

Player = (function(superClass) {
  extend(Player, superClass);

  Player.prototype.keyboard_modes = {
    QUERTY: {
      up: Phaser.Keyboard.W,
      down: Phaser.Keyboard.S,
      left: Phaser.Keyboard.A,
      right: Phaser.Keyboard.D
    },
    DVORAK: {
      up: 188,
      down: Phaser.Keyboard.O,
      left: Phaser.Keyboard.A,
      right: Phaser.Keyboard.E
    }
  };

  function Player(game, x, y, image) {
    this.game = game;
    this.x = x;
    this.y = y;
    this.image = image;
    Player.__super__.constructor.call(this, this.game, this.x, this.y, this.image, null, true);
    this.game.phaser.input.keyboard.addCallbacks(this, this.onDown, this.onUp, this.onPress);
    this.setupKeymapping("QUERTY");
    this.airDrag = 0;
    this.floorDrag = 5000;
    this.sprite.animations.add('walk', [4, 10, 11, 0, 1, 2, 7, 8, 9, 3], 10, true, true);
    this.sprite.animations.add('stand', [4]);
    this.sprite.animations.play('stand');
    this.equipment = [];
    this.timer = 0;
    this.attacking = false;
  }

  Player.prototype.update = function() {
    var left, right;
    Player.__super__.update.call(this);
    left = this.game.phaser.input.keyboard.isDown(this.keyboard_mode.left);
    right = this.game.phaser.input.keyboard.isDown(this.keyboard_mode.right);
    if (this.sprite.body.onFloor() || this.sprite.body.blocked.down) {
      this.sprite.body.drag.x = this.floorDrag;
      if (left || right) {
        this.sprite.body.velocity.x = 0;
      }
      if (left) {
        this.moveLeft();
      }
      if (right) {
        this.moveRight();
      }
      this.jumps = 0;
    } else {
      this.sprite.body.drag.x = this.airDrag;
    }
    if (this.game.phaser.input.keyboard.isDown(Phaser.Keyboard.J)) {
      if (!this.attacking) {
        this.attacking = true;
        this.sword.sprite.rotation += 45 * (Math.PI / 180);
        return this.game.queue((function(_this) {
          return function() {
            _this.sword.sprite.rotation -= 45 * (Math.PI / 180);
            return _this.game.queue(function() {
              return _this.attacking = false;
            }, 250);
          };
        })(this), 250);
      }
    }
  };

  Player.prototype.onDown = function(key) {
    switch (key.which) {
      case Phaser.Keyboard.SPACEBAR:
        if (this.jumps < this.maxJumps) {
          this.sprite.body.velocity.y = -2000;
          return this.jumps++;
        }
        break;
      case Phaser.Keyboard.P:
        return this.sprite.animations.play('walk');
    }
  };

  Player.prototype.onUp = function(key) {
    switch (key.which) {
      case this.keyboard_mode.left:
      case this.keyboard_mode.right:
        return this.sprite.animations.play('stand');
    }
  };

  Player.prototype.onPress = function(key) {};

  Player.prototype.equipEntity = function(entity) {
    this.equipment.push(entity);
    return this.sprite.addChild(entity.sprite);
  };

  Player.prototype.equipSword = function(sword) {
    this.sword = sword;
    this.sword.sprite.anchor.setTo(0, 1);
    this.sword.sprite.scale.setTo(2, 2);
    return this.equipEntity(this.sword);
  };

  Player.prototype.setupKeymapping = function(mode) {
    if (mode in this.keyboard_modes) {
      return this.keyboard_mode = this.keyboard_modes[mode];
    }
  };

  return Player;

})(Entity);

module.exports = Player;



},{"./Entity":4}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
